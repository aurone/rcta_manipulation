<launch>
    <arg name="live" default="true"/>
    <arg name="fake" default="false"/>

    <!-- move_group parameters -->
    <arg name="allow_trajectory_execution"          default="true"/>
    <arg name="max_safe_path_cost"                  default="1"/>
    <arg name="jiggle_fraction"                     default="0.00694"/>
    <arg name="publish_monitored_planning_scene"    default="true"/>

    <arg name="fake_execution"                      value="$(arg fake)"/>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the -->
    <!-- param server -->
    <include file="$(find rcta)/launch/moveit/roman/planning_context.launch">
        <arg name="load_robot_description" value="true"/>
    </include>

    <param name="collision_detector" value="collision_detection/CollisionPluginSBPL"/>
    <rosparam command="load" file="$(find rcta)/config/robots/roman/common/collision_model.yaml"/>
    <rosparam param="world_collision_model">
        size_x: 20.0
        size_y: 20.0
        size_z: 2.1
        origin_x: -10.0
        origin_y: -10.0
        origin_z: -0.10
        res_m: 0.05
        max_distance_m: 0.8
        frame_id: map
    </rosparam>
    <!--
    <rosparam param="world_collision_model">
        size_x: 3.0
        size_y: 3.0
        size_z: 2.1
        origin_x: -1.5
        origin_y: -1.5
        origin_z: -0.10
        res_m: 0.02
        max_distance_m: 0.8 # will be buffed out by the largest sphere in the collision model
        frame_id: base_footprint
    </rosparam>
    -->
    <rosparam param="self_collision_model">
        size_x: 3.0
        size_y: 3.0
        size_z: 2.0
        origin_x: -1.5
        origin_y: -1.5
        origin_z: 0.0
        res_m: 0.02
        max_distance_m: 0.2 # will be buffed out by the largest sphere in the collision model
        frame_id: base_footprint
    </rosparam>

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find rcta)/config/robots/roman/moveit/planning_pipeline.launch.xml">
        <arg name="pipeline" value="sbpl"/>
    </include>

    <!-- Trajectory Execution Functionality -->
    <include if="$(arg allow_trajectory_execution)" ns="move_group" file="$(find rcta)/config/robots/roman/moveit/trajectory_execution.launch.xml">
        <arg name="fake_execution" value="$(arg fake_execution)"/>
    </include>

    <!-- Sensors Functionality -->
    <include ns="move_group" file="$(find rcta)/config/robots/roman/moveit/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
        <arg name="moveit_sensor_manager" value="rcta_roman"/>
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" pkg="moveit_ros_move_group" type="move_group">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>

        <param name="trajectory_execution/execution_duration_monitoring" value="false"/>
        <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.5"/>
        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)"/>

        <!-- MoveGroup capabilities to load -->
        <param name="capabilities" value="
                move_group/MoveGroupCartesianPathService
                move_group/MoveGroupExecuteService
                move_group/MoveGroupKinematicsService
                move_group/MoveGroupMoveAction
                move_group/MoveGroupPickPlaceAction
                move_group/MoveGroupPlanService
                move_group/MoveGroupQueryPlannersService
                move_group/MoveGroupStateValidationService
                move_group/MoveGroupGetPlanningSceneService
                move_group/ClearOctomapService"/>

        <!-- Publish the planning scene of the physical robot so that rviz -->
        <!-- plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
    </node>
</launch>

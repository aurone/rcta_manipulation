<launch>
    <arg name="debug" default="false"/>

    <arg name="load_robot_description" default="false"/>

    <!-- move_group parameters -->
    <arg name="allow_trajectory_execution"          default="true"/>
    <arg name="max_safe_path_cost"                  default="1"/>
    <arg name="jiggle_fraction"                     default="0.00694"/>
    <arg name="publish_monitored_planning_scene"    default="true"/>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the -->
    <!-- param server -->
    <include file="$(find roman_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    </include>

    <!--+++++++++++++++++++++++++++++++++++-->
    <!-- Collision Detection Functionality -->
    <!--+++++++++++++++++++++++++++++++++++-->

    <param name="collision_detector" value="collision_detection/CollisionPluginSBPL"/>
    <rosparam command="load" file="$(find roman_moveit_config)/config/collision_model.yaml"/>
    <rosparam param="world_collision_model">
        size_x: 20.0
        size_y: 20.0
        size_z: 2.1
        origin_x: -10.0
        origin_y: -10.0
        origin_z: -0.15
        res_m: 0.05
        max_distance_m: 0.8
        frame_id: map
    </rosparam>
    <rosparam param="self_collision_model">
        size_x: 4.0
        size_y: 4.0
        size_z: 2.0
        origin_x: -2.0
        origin_y: -2.0
        origin_z: -0.5
        res_m: 0.02
        max_distance_m: 0.2 # will be buffed out by the largest sphere in the collision model
        frame_id: base_link
    </rosparam>

    <!--++++++++++++++++++++++++-->
    <!-- Planning Functionality -->
    <!--++++++++++++++++++++++++-->

    <group ns="move_group">
        <arg name="planning_plugin" value="sbpl_interface/SBPLPlanner"/>

        <arg name="planning_adapters" value="
                default_planner_request_adapters/FixWorkspaceBounds
                default_planner_request_adapters/FixStartStateBounds
                default_planner_request_adapters/FixStartStateCollision
                default_planner_request_adapters/FixStartStatePathConstraints
                default_planner_request_adapters/AddTimeParameterization"/>

        <!-- default_planner_request_adapters/AddTimeParameterization -->

        <arg name="start_state_max_bounds_error" value="0.1"/>

        <param name="planning_plugin" value="$(arg planning_plugin)"/>
        <param name="request_adapters" value="$(arg planning_adapters)"/>
        <param name="start_state_max_bounds_error" value="$(arg start_state_max_bounds_error)"/>

        <rosparam command="load" file="$(find roman_moveit_config)/config/sbpl_planning.yaml"/>

        <!-- motion primitives -->
        <group ns="graph_configs/RightArmManipLatticeConfigDefault">
            <param name="mprim_filename" value="$(find roman_moveit_config)/config/right_arm.mprim"/>
        </group>
        <group ns="graph_configs/LeftArmManipLatticeConfigDefault">
            <param name="mprim_filename" value="$(find roman_moveit_config)/config/right_arm.mprim"/>
        </group>
        <group ns="graph_configs/RightArmManipLatticeEgraphConfigDefault">
            <param name="mprim_filename" value="$(find roman_moveit_config)/config/right_arm.mprim"/>
        </group>
        <group ns="graph_configs/RightArmAndTorsoManipLatticeConfigDefault">
            <param name="mprim_filename" value="$(find roman_moveit_config)/config/right_arm_and_torso.mprim"/>
        </group>

        <!-- directories to read/write e-graphs from for group right_arm -->
        <group ns="right_arm/planner_configs/right_arm_ARA_BFS_ML">
            <param name="plan_output_dir" value="$(env HOME)/data/egraphs/roman_right_arm_paths"/>
        </group>
        <group ns="graph_configs/RightArmManipLatticeEgraphConfigDefault">
            <param name="egraph_path" value="$(env HOME)/data/egraphs/roman_right_arm_paths"/>
        </group>

        <!-- directories to read/write e-graphs from for group right_arm_torso_base -->
        <group ns="right_arm_torso_base/planner_configs/ARA_BFS_WS">
            <param name="plan_output_dir" value="$(env HOME)/data/egraphs/roman_right_arm_torso_base_paths"/>
        </group>
        <group ns="graph_configs/RightArmTorsoBaseWorkspaceEGraph">
            <param name="egraph_path" value="$(env HOME)/data/egraphs/roman_right_arm_torso_base_paths"/>
        </group>
        <!--
        <group ns="graph_configs/RightArmTorsoBaseWorkspaceLattice">
            <param name="mprim_filename" value="$(find roman_moveit_config)/config/right_arm_torso_base.mprim"/>
        </group>
        -->
    </group>

    <!--++++++++++++++++++++++++++++++++++++-->
    <!-- Trajectory Execution Functionality -->
    <!--++++++++++++++++++++++++++++++++++++-->

    <group if="$(arg allow_trajectory_execution)" ns="move_group">
        <!-- This file makes it easy to include the settings for trajectory
        execution.
        -->

        <!-- Flag indicating whether MoveIt! is allowed to load/unload or switch
        controllers. NOTE: This was set to $(arg fake_execution) before fake
        execution was moved outside of this package. I'm not sure under what
        circumstances MoveIt! switches controllers, and it seems weird to not allow
        it to do that, but we'll keep it false here anyway. - Andrew
        -->
        <param name="moveit_manage_controllers" value="false"/>

        <!-- When determining the expected duration of a trajectory, this
        multiplicative factor is applied to get the allowed duration of execution;
        default 1.2
        -->
        <param name="allowed_execution_duration_scaling" value="1.2"/>

        <!-- Allow more than the expected execution time before triggering a
        trajectory cancel (applied after scaling); default 0.5.
        -->
        <param name="allowed_goal_duration_margin" value="0.5"/>

        <!-- Load the robot specific controller manager. This sets the
        moveit_controller_manager ROS parameter.
        -->
        <param name="moveit_controller_manager" value="moveit_simple_controller_manager/MoveItSimpleControllerManager"/>
        <rosparam file="$(find roman_moveit_config)/config/controllers.yaml"/>
    </group>

    <!--+++++++++++++++++++++++-->
    <!-- Sensors Functionality -->
    <!--+++++++++++++++++++++++-->

    <group if="$(arg allow_trajectory_execution)" ns="move_group">
        <!-- This file makes it easy to include the settings for sensor managers -->

        <!-- Params for the octomap monitor -->
        <!--  <param name="octomap_frame" type="string" value="some frame in which the robot moves" /> -->
        <param name="octomap_resolution" type="double" value="0.025" />
        <param name="max_range" type="double" value="5.0" />

        <!-- Load the robot specific sensor manager; this sets the moveit_sensor_manager ROS parameter -->
        <rosparam command="load" file="$(find roman_moveit_config)/config/roman_sensors.yaml"/>

        <param name="octomap_frame" type="string" value="map"/>
        <param name="octomap_resolution" type="double" value="0.05"/>
        <param name="max_range" type="double" value="5.0"/>
    </group>

    <!--+++++++++++++++++++++-->
    <!-- The move_group Node -->
    <!--+++++++++++++++++++++-->

    <env name="SMPL_VISUALIZE_CONFIG_FILE" value="$(find roman_moveit_config)/config/smpl_visual.ini"/>
    <arg if="$(arg debug)" name="launch_prefix" value="gdb ex --args"/>
    <arg unless="$(arg debug)" name="launch_prefix" value=""/>
    <!-- Start the actual move_group node/action server -->
    <node name="move_group" pkg="moveit_ros_move_group" type="move_group" launch-prefix="$(arg launch_prefix)">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>

        <param name="trajectory_execution/execution_duration_monitoring" value="false"/>
        <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.5"/>
        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)"/>

        <!-- MoveGroup capabilities to load -->
        <param name="capabilities" value="
                move_group/MoveGroupCartesianPathService
                move_group/MoveGroupExecuteService
                move_group/MoveGroupKinematicsService
                move_group/MoveGroupMoveAction
                move_group/MoveGroupPickPlaceAction
                move_group/MoveGroupPlanService
                move_group/MoveGroupQueryPlannersService
                move_group/MoveGroupStateValidationService
                move_group/MoveGroupGetPlanningSceneService
                move_group/ClearOctomapService"/>

        <!-- Publish the planning scene of the physical robot so that rviz -->
        <!-- plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
    </node>
</launch>

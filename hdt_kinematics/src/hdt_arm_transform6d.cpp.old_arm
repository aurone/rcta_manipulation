/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-02-28 15:58:31.548951
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include <hdt_kinematics/hdt_arm_transform6d.h> // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( ::isnan(fy) ) {
        IKFAST_ASSERT(!::isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( ::isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( ::isnan(fy) ) {
        IKFAST_ASSERT(!::isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( ::isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKsin(j[1]);
x9=IKsin(j[3]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0317500000000000))*(x5));
x15=((IkReal(1.00000000000000))*(x9));
x16=((IkReal(1.00000000000000))*(x7));
x17=((IkReal(0.0317500000000000))*(x6));
x18=((IkReal(1.00000000000000))*(x2));
x19=((IkReal(0.0317500000000000))*(x7));
x20=((IkReal(-1.00000000000000))*(x6));
x21=((x1)*(x9));
x22=((x2)*(x8));
x23=((x3)*(x8));
x24=((IkReal(-1.00000000000000))*(x12));
x25=((IkReal(-1.00000000000000))*(x5));
x26=((x4)*(x8));
x27=((x0)*(x3));
x28=((IkReal(-1.00000000000000))*(x9));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((x1)*(x4));
x31=((x0)*(x8));
x32=((x0)*(x2));
x33=((IkReal(-1.00000000000000))*(x11));
x34=((x1)*(x16));
x35=((IkReal(1.00000000000000))*(x3)*(x4));
x36=((IkReal(0.0317500000000000))*(x8)*(x9));
x37=((x31)*(x9));
x38=((x16)*(x26));
x39=((((IkReal(-1.00000000000000))*(x18)*(x30)))+(x27));
x40=((((IkReal(-1.00000000000000))*(x34)))+(((x23)*(x9))));
x41=((((x18)*(x4)))+(((IkReal(-1.00000000000000))*(x1)*(x27))));
x42=((((IkReal(-1.00000000000000))*(x35)))+(((IkReal(-1.00000000000000))*(x0)*(x1)*(x18))));
x43=((((IkReal(-1.00000000000000))*(x0)*(x18)))+(((IkReal(-1.00000000000000))*(x3)*(x30))));
x44=((x39)*(x6));
x45=((((IkReal(-1.00000000000000))*(x1)*(x15)))+(((IkReal(-1.00000000000000))*(x16)*(x23))));
x46=((x40)*(x6));
x47=((x42)*(x5));
x48=((x43)*(x9));
x49=((IkReal(-1.00000000000000))*(x43));
x50=((x43)*(x7));
x51=((x12)*(x45));
x52=((((x22)*(x5)))+(x46));
x53=((((x22)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x15)*(x23)))+(x34))))));
x54=((((x29)*(x31)))+(((x41)*(x9))));
x55=((x11)*(x52));
x56=((x48)+(((x26)*(x29))));
x57=((((x29)*(x41)))+(((x28)*(x31))));
x58=((((IkReal(-1.00000000000000))*(x15)*(x26)))+(((IkReal(-1.00000000000000))*(x16)*(x43))));
x59=((x12)*(x57));
x60=((((x56)*(x6)))+(((x39)*(x5))));
x61=((x47)+(((x54)*(x6))));
x62=((((x42)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x15)*(x41)))+(((x16)*(x31))))))));
x63=((x11)*(x60));
x64=((x11)*(x61));
eerot[0]=((((x10)*(x62)))+(((x13)*(((x59)+(x64))))));
eerot[1]=((((x13)*(x62)))+(((x10)*(((((x24)*(x57)))+(((x33)*(x61))))))));
eerot[2]=((((x12)*(((((x20)*(x54)))+(((x25)*(x42)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x16)*(x41)))+(((IkReal(-1.00000000000000))*(x15)*(x31))))))));
eetrans[0]=((((x7)*(((((IkReal(0.622300000000000))*(x1)*(x27)))+(((IkReal(-0.622300000000000))*(x2)*(x4)))))))+(((IkReal(-0.622300000000000))*(x37)))+(((IkReal(0.546100000000000))*(x31)))+(((IkReal(0.0698500000000000))*(x1)*(x32)))+(((IkReal(0.0698500000000000))*(x3)*(x4)))+(((x12)*(((((IkReal(-0.0317500000000000))*(x37)))+(((IkReal(-1.00000000000000))*(x19)*(x41)))))))+(((x11)*(((((x17)*(x54)))+(((x14)*(x42))))))));
eerot[3]=((((x10)*(((((x5)*(((((x28)*(x43)))+(x38)))))+(x44)))))+(((x13)*(((((x12)*(x58)))+(x63))))));
eerot[4]=((((x10)*(((((x33)*(x60)))+(((x24)*(((((x29)*(x43)))+(((x26)*(x28)))))))))))+(((x13)*(((((x5)*(((((IkReal(-1.00000000000000))*(x15)*(x43)))+(x38)))))+(x44))))));
eerot[5]=((((x12)*(((((x20)*(x56)))+(((x25)*(x39)))))))+(((x11)*(x58))));
IkReal x65=((x26)*(x9));
eetrans[1]=((((x12)*(((((IkReal(-1.00000000000000))*(x19)*(x43)))+(((IkReal(-0.0317500000000000))*(x65)))))))+(((IkReal(0.546100000000000))*(x26)))+(((x7)*(((((IkReal(0.622300000000000))*(x32)))+(((IkReal(0.622300000000000))*(x3)*(x30)))))))+(((x11)*(((((x17)*(x56)))+(((x14)*(x39)))))))+(((IkReal(-0.0698500000000000))*(x27)))+(((IkReal(0.0698500000000000))*(x2)*(x30)))+(((IkReal(-0.622300000000000))*(x65))));
eerot[6]=((((x10)*(x53)))+(((x13)*(((x55)+(x51))))));
eerot[7]=((((x13)*(x53)))+(((x10)*(((((IkReal(-1.00000000000000))*(x51)))+(((IkReal(-1.00000000000000))*(x55))))))));
eerot[8]=((((x11)*(x45)))+(((x12)*(((((IkReal(-1.00000000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x18)*(x5)*(x8))))))));
eetrans[2]=((IkReal(0.152400000000000))+(((IkReal(-0.622300000000000))*(x23)*(x7)))+(((IkReal(-0.0698500000000000))*(x22)))+(((x12)*(((((IkReal(-1.00000000000000))*(x19)*(x23)))+(((IkReal(-0.0317500000000000))*(x21)))))))+(((IkReal(-0.622300000000000))*(x21)))+(((IkReal(0.546100000000000))*(x1)))+(((x11)*(((((x17)*(x40)))+(((x14)*(x22))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij5[2], _nj5,_ij6[2], _nj6,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=px;
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=py;
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.152400000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)))+(pp));
IkReal gconst1;
gconst1=((IkReal(0.127000000000000))*(npy));
IkReal gconst2;
gconst2=((IkReal(-0.689353460000000))+(((IkReal(0.0635000000000000))*(npx)))+(pp));
IkReal gconst3;
gconst3=((((IkReal(0.546100000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst4;
gconst4=((IkReal(-2.00000000000000))*(npx));
IkReal gconst5;
gconst5=((((IkReal(0.546100000000000))*(sj4)))+(npy)+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst6;
gconst6=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)))+(pp));
IkReal gconst7;
gconst7=((IkReal(0.127000000000000))*(npy));
IkReal gconst8;
gconst8=((IkReal(-0.689353460000000))+(((IkReal(0.0635000000000000))*(npx)))+(pp));
IkReal gconst9;
gconst9=((((IkReal(0.546100000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst10;
gconst10=((IkReal(-2.00000000000000))*(npx));
IkReal gconst11;
gconst11=((((IkReal(0.546100000000000))*(sj4)))+(npy)+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst12;
gconst12=IkReal(1.35935212000000);
IkReal gconst13;
gconst13=IkReal(1.35935212000000);
IkReal gconst14;
gconst14=IkReal(1.35935212000000);
IkReal gconst15;
gconst15=IkReal(1.35935212000000);
IkReal gconst16;
gconst16=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)))+(pp));
IkReal gconst17;
gconst17=((IkReal(0.127000000000000))*(npy));
IkReal gconst18;
gconst18=((IkReal(-0.689353460000000))+(((IkReal(0.0635000000000000))*(npx)))+(pp));
IkReal gconst19;
gconst19=((((IkReal(-1.00000000000000))*(npy)))+(((IkReal(-0.546100000000000))*(sj4)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst20;
gconst20=((IkReal(-2.00000000000000))*(npx));
IkReal gconst21;
gconst21=((npy)+(((IkReal(-0.546100000000000))*(sj4)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst22;
gconst22=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)))+(pp));
IkReal gconst23;
gconst23=((IkReal(0.127000000000000))*(npy));
IkReal gconst24;
gconst24=((IkReal(-0.689353460000000))+(((IkReal(0.0635000000000000))*(npx)))+(pp));
IkReal gconst25;
gconst25=((((IkReal(-1.00000000000000))*(npy)))+(((IkReal(-0.546100000000000))*(sj4)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal gconst26;
gconst26=((IkReal(-2.00000000000000))*(npx));
IkReal gconst27;
gconst27=((npy)+(((IkReal(-0.546100000000000))*(sj4)))+(((IkReal(-0.0698500000000000))*(cj4))));
IkReal x66=((gconst21)*(gconst25));
IkReal x67=((gconst18)*(gconst19));
IkReal x68=((gconst22)*(gconst27));
IkReal x69=((gconst18)*(gconst20));
IkReal x70=((gconst22)*(gconst26));
dummyeval[0]=((((gconst16)*(gconst24)*(x66)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst23)*(x66)))+(((IkReal(-1.00000000000000))*(x69)*(x70)))+(((gconst23)*(gconst25)*(x69)))+(((IkReal(-1.00000000000000))*(gconst24)*(gconst25)*(x67)))+(((x67)*(x68)))+(((gconst17)*(gconst21)*(x70)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(x68))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x71=((gconst12)*(gconst5));
IkReal x72=((gconst15)*(gconst9));
IkReal x73=((gconst18)*(gconst19));
IkReal x74=((IkReal(1.00000000000000))*(gconst25));
IkReal x75=((gconst22)*(gconst27));
IkReal x76=((gconst14)*(gconst27));
IkReal x77=((gconst22)*(gconst26));
IkReal x78=((IkReal(1.00000000000000))*(gconst2));
IkReal x79=((gconst17)*(gconst21));
IkReal x80=((gconst26)*(gconst6));
IkReal x81=((gconst24)*(gconst25));
IkReal x82=((gconst0)*(gconst21));
IkReal x83=((gconst25)*(gconst8));
IkReal x84=((gconst7)*(gconst9));
IkReal x85=((gconst17)*(gconst5));
IkReal x86=((gconst11)*(gconst14));
IkReal x87=((gconst11)*(gconst22));
IkReal x88=((gconst19)*(gconst2));
IkReal x89=((gconst16)*(gconst5));
IkReal x90=((gconst13)*(gconst3));
IkReal x91=((gconst13)*(gconst4));
IkReal x92=((gconst18)*(gconst3));
IkReal x93=((gconst14)*(gconst26));
IkReal x94=((gconst13)*(gconst19));
IkReal x95=((gconst24)*(gconst9));
IkReal x96=((gconst13)*(gconst20));
IkReal x97=((gconst8)*(gconst9));
IkReal x98=((gconst25)*(gconst7));
IkReal x99=((gconst2)*(gconst4));
IkReal x100=((IkReal(1.00000000000000))*(gconst6));
IkReal x101=((gconst10)*(gconst22));
IkReal x102=((gconst1)*(gconst21));
IkReal x103=((gconst11)*(gconst6));
IkReal x104=((gconst16)*(gconst21));
IkReal x105=((gconst10)*(gconst14));
IkReal x106=((gconst1)*(gconst5));
IkReal x107=((gconst18)*(gconst20));
IkReal x108=((gconst0)*(gconst5));
IkReal x109=((gconst15)*(gconst25));
IkReal x110=((gconst2)*(gconst3));
IkReal x111=((gconst18)*(gconst4));
IkReal x112=((gconst2)*(gconst20));
IkReal x113=((gconst23)*(gconst9));
IkReal x114=((gconst27)*(gconst6));
IkReal x115=((gconst12)*(gconst21));
IkReal x116=((gconst10)*(gconst6));
IkReal x117=((gconst23)*(gconst25));
IkReal x118=((gconst21)*(x83));
IkReal x119=((gconst4)*(x117));
IkReal x120=((gconst4)*(x113));
IkReal x121=((IkReal(1.00000000000000))*(x115));
IkReal x122=((IkReal(1.00000000000000))*(x107));
IkReal x123=((IkReal(1.00000000000000))*(gconst0)*(x86));
IkReal x124=((gconst20)*(gconst26)*(x78));
op[0]=((((IkReal(-1.00000000000000))*(x122)*(x77)))+(((IkReal(-1.00000000000000))*(gconst23)*(x74)*(x79)))+(((IkReal(-1.00000000000000))*(x104)*(x75)))+(((IkReal(-1.00000000000000))*(gconst24)*(x73)*(x74)))+(((x73)*(x75)))+(((x104)*(x81)))+(((x77)*(x79)))+(((x107)*(x117))));
op[1]=((((x117)*(x96)))+(((IkReal(-1.00000000000000))*(gconst24)*(x74)*(x94)))+(((x79)*(x93)))+(((IkReal(-1.00000000000000))*(x121)*(x75)))+(((IkReal(-1.00000000000000))*(x104)*(x76)))+(((IkReal(-1.00000000000000))*(x77)*(x96)))+(((x75)*(x94)))+(((IkReal(-1.00000000000000))*(x122)*(x93)))+(((IkReal(-1.00000000000000))*(gconst15)*(x73)*(x74)))+(((x104)*(x109)))+(((x73)*(x76)))+(((x115)*(x81))));
op[2]=((((IkReal(-1.00000000000000))*(x101)*(x122)))+(((x77)*(x85)))+(((x79)*(x80)))+(((IkReal(-1.00000000000000))*(gconst24)*(x74)*(x92)))+(((x112)*(x117)))+(((x111)*(x117)))+(((x107)*(x98)))+(((IkReal(-1.00000000000000))*(gconst24)*(x74)*(x88)))+(((IkReal(-1.00000000000000))*(gconst15)*(x74)*(x94)))+(((IkReal(-1.00000000000000))*(x121)*(x76)))+(((x81)*(x82)))+(((x81)*(x89)))+(((IkReal(-1.00000000000000))*(gconst20)*(x77)*(x78)))+(((IkReal(-1.00000000000000))*(x93)*(x96)))+(((x109)*(x115)))+(((x101)*(x79)))+(((IkReal(-1.00000000000000))*(gconst7)*(x74)*(x79)))+(((IkReal(-1.00000000000000))*(gconst8)*(x73)*(x74)))+(((x73)*(x87)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x104)))+(((x75)*(x92)))+(((IkReal(-1.00000000000000))*(x73)*(x95)))+(((IkReal(-1.00000000000000))*(x104)*(x87)))+(((IkReal(-1.00000000000000))*(gconst23)*(x102)*(x74)))+(((IkReal(-1.00000000000000))*(x75)*(x89)))+(((IkReal(-1.00000000000000))*(x75)*(x82)))+(((x76)*(x94)))+(((x75)*(x88)))+(((IkReal(-1.00000000000000))*(gconst23)*(x74)*(x85)))+(((IkReal(-1.00000000000000))*(x111)*(x77)))+(((IkReal(-1.00000000000000))*(x113)*(x79)))+(((IkReal(-1.00000000000000))*(x122)*(x80)))+(((x104)*(x83)))+(((x102)*(x77)))+(((x104)*(x95)))+(((x107)*(x113)))+(((x114)*(x73))));
op[3]=((((x113)*(x96)))+(((x87)*(x94)))+(((x96)*(x98)))+(((x117)*(x91)))+(((IkReal(-1.00000000000000))*(gconst24)*(x74)*(x90)))+(((IkReal(-1.00000000000000))*(gconst15)*(x74)*(x88)))+(((IkReal(-1.00000000000000))*(gconst20)*(x78)*(x93)))+(((IkReal(-1.00000000000000))*(gconst15)*(x74)*(x92)))+(((x102)*(x93)))+(((x114)*(x94)))+(((IkReal(-1.00000000000000))*(x80)*(x96)))+(((x105)*(x79)))+(((x85)*(x93)))+(((IkReal(-1.00000000000000))*(gconst8)*(x74)*(x94)))+(((IkReal(-1.00000000000000))*(x101)*(x96)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x115)))+(((x73)*(x86)))+(((x104)*(x72)))+(((IkReal(-1.00000000000000))*(x77)*(x91)))+(((IkReal(-1.00000000000000))*(x76)*(x82)))+(((IkReal(-1.00000000000000))*(x76)*(x89)))+(((x76)*(x88)))+(((x75)*(x90)))+(((IkReal(-1.00000000000000))*(x104)*(x86)))+(((x76)*(x92)))+(((IkReal(-1.00000000000000))*(x71)*(x75)))+(((x109)*(x89)))+(((x109)*(x82)))+(((IkReal(-1.00000000000000))*(x72)*(x73)))+(((x115)*(x95)))+(((IkReal(-1.00000000000000))*(x121)*(x87)))+(((IkReal(-1.00000000000000))*(x105)*(x122)))+(((IkReal(-1.00000000000000))*(x94)*(x95)))+(((x115)*(x83)))+(((IkReal(-1.00000000000000))*(x111)*(x93)))+(((x71)*(x81))));
op[4]=((((IkReal(-1.00000000000000))*(x113)*(x85)))+(((IkReal(-1.00000000000000))*(gconst20)*(x101)*(x78)))+(((x87)*(x92)))+(((x117)*(x99)))+(((x110)*(x75)))+(((x107)*(x84)))+(((x106)*(x77)))+(((IkReal(-1.00000000000000))*(x108)*(x75)))+(((x82)*(x95)))+(((x112)*(x113)))+(((x111)*(x113)))+(((x89)*(x95)))+(((IkReal(-1.00000000000000))*(gconst15)*(x74)*(x90)))+(((x102)*(x80)))+(((x82)*(x83)))+(((x101)*(x85)))+(((IkReal(-1.00000000000000))*(x91)*(x93)))+(((IkReal(-1.00000000000000))*(x102)*(x113)))+(((IkReal(-1.00000000000000))*(gconst20)*(x78)*(x80)))+(((x86)*(x94)))+(((x115)*(x72)))+(((IkReal(-1.00000000000000))*(gconst8)*(x74)*(x88)))+(((IkReal(-1.00000000000000))*(gconst23)*(x106)*(x74)))+(((x114)*(x92)))+(((x116)*(x79)))+(((x114)*(x88)))+(((IkReal(-1.00000000000000))*(gconst8)*(x74)*(x92)))+(((IkReal(-1.00000000000000))*(x72)*(x94)))+(((IkReal(-1.00000000000000))*(x82)*(x87)))+(((IkReal(-1.00000000000000))*(x87)*(x89)))+(((IkReal(-1.00000000000000))*(x79)*(x84)))+(((IkReal(-1.00000000000000))*(x73)*(x97)))+(((IkReal(-1.00000000000000))*(gconst7)*(x74)*(x85)))+(((x108)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x104)))+(((x76)*(x90)))+(((IkReal(-1.00000000000000))*(x101)*(x111)))+(((x112)*(x98)))+(((x111)*(x98)))+(((IkReal(-1.00000000000000))*(x71)*(x76)))+(((IkReal(-1.00000000000000))*(gconst19)*(x78)*(x95)))+(((IkReal(-1.00000000000000))*(x92)*(x95)))+(((IkReal(-1.00000000000000))*(gconst24)*(x110)*(x74)))+(((x83)*(x89)))+(((x80)*(x85)))+(((x109)*(x71)))+(((IkReal(-1.00000000000000))*(x121)*(x86)))+(((IkReal(-1.00000000000000))*(gconst4)*(x77)*(x78)))+(((IkReal(-1.00000000000000))*(gconst10)*(x100)*(x107)))+(((IkReal(-1.00000000000000))*(x111)*(x80)))+(((x101)*(x102)))+(((IkReal(-1.00000000000000))*(gconst7)*(x102)*(x74)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x89)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x82)))+(((x103)*(x73)))+(((x104)*(x97)))+(((IkReal(-1.00000000000000))*(x105)*(x96)))+(((x87)*(x88))));
op[5]=((((x113)*(x91)))+(((x71)*(x95)))+(((x87)*(x90)))+(((x110)*(x76)))+(((IkReal(-1.00000000000000))*(x105)*(x111)))+(((IkReal(-1.00000000000000))*(x108)*(x76)))+(((x103)*(x94)))+(((x86)*(x92)))+(((IkReal(-1.00000000000000))*(x90)*(x95)))+(((x114)*(x90)))+(((x86)*(x88)))+(((IkReal(-1.00000000000000))*(x80)*(x91)))+(((IkReal(-1.00000000000000))*(x86)*(x89)))+(((IkReal(-1.00000000000000))*(gconst10)*(x100)*(x96)))+(((IkReal(-1.00000000000000))*(gconst8)*(x74)*(x90)))+(((IkReal(-1.00000000000000))*(x101)*(x91)))+(((x72)*(x89)))+(((x72)*(x82)))+(((x102)*(x105)))+(((IkReal(-1.00000000000000))*(x72)*(x92)))+(((IkReal(-1.00000000000000))*(x71)*(x87)))+(((x106)*(x93)))+(((IkReal(-1.00000000000000))*(x82)*(x86)))+(((x108)*(x109)))+(((IkReal(-1.00000000000000))*(gconst19)*(x72)*(x78)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x115)))+(((IkReal(-1.00000000000000))*(gconst15)*(x110)*(x74)))+(((x115)*(x97)))+(((IkReal(-1.00000000000000))*(x94)*(x97)))+(((IkReal(-1.00000000000000))*(gconst4)*(x78)*(x93)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x71)))+(((IkReal(-1.00000000000000))*(gconst20)*(x105)*(x78)))+(((x105)*(x85)))+(((x84)*(x96)))+(((x91)*(x98)))+(((x71)*(x83))));
op[6]=((((x113)*(x99)))+(((x110)*(x87)))+(((x110)*(x114)))+(((x82)*(x97)))+(((x89)*(x97)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x82)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x89)))+(((IkReal(-1.00000000000000))*(x102)*(x84)))+(((IkReal(-1.00000000000000))*(x84)*(x85)))+(((x103)*(x88)))+(((x103)*(x92)))+(((x86)*(x90)))+(((IkReal(-1.00000000000000))*(gconst3)*(x78)*(x95)))+(((x102)*(x116)))+(((IkReal(-1.00000000000000))*(x72)*(x90)))+(((IkReal(-1.00000000000000))*(x71)*(x86)))+(((IkReal(-1.00000000000000))*(gconst4)*(x101)*(x78)))+(((IkReal(-1.00000000000000))*(x106)*(x113)))+(((IkReal(-1.00000000000000))*(gconst27)*(x100)*(x108)))+(((x106)*(x80)))+(((x108)*(x95)))+(((IkReal(-1.00000000000000))*(gconst7)*(x106)*(x74)))+(((x112)*(x84)))+(((x111)*(x84)))+(((x108)*(x83)))+(((IkReal(-1.00000000000000))*(gconst20)*(x116)*(x78)))+(((IkReal(-1.00000000000000))*(gconst19)*(x78)*(x97)))+(((IkReal(-1.00000000000000))*(x92)*(x97)))+(((x98)*(x99)))+(((x116)*(x85)))+(((IkReal(-1.00000000000000))*(x108)*(x87)))+(((x101)*(x106)))+(((IkReal(-1.00000000000000))*(gconst8)*(x110)*(x74)))+(((IkReal(-1.00000000000000))*(gconst10)*(x100)*(x111)))+(((IkReal(-1.00000000000000))*(gconst4)*(x78)*(x80)))+(((x71)*(x72)))+(((IkReal(-1.00000000000000))*(x105)*(x91))));
op[7]=((((x110)*(x86)))+(((x71)*(x97)))+(((x103)*(x90)))+(((IkReal(-1.00000000000000))*(x90)*(x97)))+(((IkReal(-1.00000000000000))*(gconst10)*(x100)*(x91)))+(((IkReal(-1.00000000000000))*(gconst4)*(x105)*(x78)))+(((x108)*(x72)))+(((x105)*(x106)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x71)))+(((IkReal(-1.00000000000000))*(gconst3)*(x72)*(x78)))+(((IkReal(-1.00000000000000))*(x108)*(x86)))+(((x84)*(x91))));
op[8]=((((x106)*(x116)))+(((IkReal(-1.00000000000000))*(gconst3)*(x78)*(x97)))+(((IkReal(-1.00000000000000))*(gconst4)*(x116)*(x78)))+(((x103)*(x110)))+(((IkReal(-1.00000000000000))*(x106)*(x84)))+(((x108)*(x97)))+(((IkReal(-1.00000000000000))*(gconst11)*(x100)*(x108)))+(((x84)*(x99))));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((IkReal(2.00000000000000))*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(127.000000000000))*((npy)*(npy))))+(((IkReal(127.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(((IkReal(0.0245908379150000))+(((IkReal(-0.0431594298100000))*(sj3)))+(((IkReal(0.000309817928750000))*((sj4)*(sj4))))+(((IkReal(0.00484442579500000))*(cj3)*(cj4)*(sj4)))+(((IkReal(0.0189373008350000))*((sj3)*(sj3))))+(((IkReal(0.0189373008350000))*((cj3)*(cj3))*((cj4)*(cj4))))));
dummyeval[0]=((IkReal(79.3719008264463))+(((IkReal(61.1239669421488))*((cj3)*(cj3))*((cj4)*(cj4))))+(((IkReal(15.6363636363636))*(cj3)*(cj4)*(sj4)))+((sj4)*(sj4))+(((IkReal(-139.305785123967))*(sj3)))+(((IkReal(61.1239669421488))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x125=((cj3)*(cj4));
IkReal x126=((IkReal(0.546100000000000))*(pp));
IkReal x127=((IkReal(0.0346773500000000))*(npz));
if( IKabs(((gconst44)*(((((IkReal(-0.371171096366000))*(sj3)*(x125)))+(((IkReal(0.0395160500000000))*(npz)))+(((IkReal(-1.00000000000000))*(sj3)*(x127)))+(((IkReal(0.377556930368500))*(x125)))+(((IkReal(-0.0474753727910000))*(sj3)*(sj4)))+(((IkReal(0.0482921655122500))*(sj4)))+(((IkReal(-1.00000000000000))*(x125)*(x126)))+(((IkReal(-0.0698500000000000))*(pp)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((IkReal(-0.430239292745500))+(((IkReal(-1.00000000000000))*(sj3)*(x126)))+(((x125)*(x127)))+(((IkReal(0.622300000000000))*(pp)))+(((IkReal(-0.371171096366000))*((sj3)*(sj3))))+(((IkReal(0.800519342506500))*(sj3)))+(((IkReal(0.00443547500000000))*(npz)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst44)*(((((IkReal(-0.371171096366000))*(sj3)*(x125)))+(((IkReal(0.0395160500000000))*(npz)))+(((IkReal(-1.00000000000000))*(sj3)*(x127)))+(((IkReal(0.377556930368500))*(x125)))+(((IkReal(-0.0474753727910000))*(sj3)*(sj4)))+(((IkReal(0.0482921655122500))*(sj4)))+(((IkReal(-1.00000000000000))*(x125)*(x126)))+(((IkReal(-0.0698500000000000))*(pp)*(sj4)))))), ((gconst44)*(((IkReal(-0.430239292745500))+(((IkReal(-1.00000000000000))*(sj3)*(x126)))+(((x125)*(x127)))+(((IkReal(0.622300000000000))*(pp)))+(((IkReal(-0.371171096366000))*((sj3)*(sj3))))+(((IkReal(0.800519342506500))*(sj3)))+(((IkReal(0.00443547500000000))*(npz)*(sj4)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x128=IKcos(j5);
IkReal x129=IKsin(j5);
IkReal x130=((cj3)*(cj4));
evalcond[0]=((((IkReal(-0.546100000000000))*(sj3)*(x129)))+(((IkReal(0.622300000000000))*(x129)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.546100000000000))*(x128)*(x130)))+(((IkReal(0.0698500000000000))*(sj4)*(x128))));
evalcond[1]=((IkReal(-0.691369585000000))+(((IkReal(-0.0395160500000000))*(x128)))+(((IkReal(0.0346773500000000))*(x129)*(x130)))+(((IkReal(0.00443547500000000))*(sj4)*(x129)))+(((IkReal(0.679676060000000))*(sj3)))+(pp)+(((IkReal(0.0346773500000000))*(sj3)*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((IkReal(127.000000000000))*((npy)*(npy))))+(((IkReal(127.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(((((cj5)*((npx)*(npx))))+(((cj5)*((npy)*(npy))))));
dummyeval[0]=((((cj5)*((npx)*(npx))))+(((cj5)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x131=((IkReal(0.546100000000000))*(sj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.622300000000000))+(npz)+(x131));
evalcond[2]=((IkReal(0.622300000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[3]=((IkReal(-0.691369585000000))+(((IkReal(0.679676060000000))*(sj3)))+(pp)+(((IkReal(0.0346773500000000))*(cj3)*(cj4)))+(((IkReal(0.00443547500000000))*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign((((npx)*(npx))+((npy)*(npy))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(127.000000000000))*((npy)*(npy))))+(((IkReal(127.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x132=((IkReal(1359.35212000000))*(sj3));
IkReal x133=((IkReal(2000.00000000000))*(pp));
IkReal x134=((IkReal(8.87095000000000))*(cj4));
IkReal x135=((IkReal(69.3547000000000))*(cj3)*(sj4));
if( IKabs(((gconst48)*(((((npx)*(x135)))+(((IkReal(-1.00000000000000))*(npx)*(x134)))+(((IkReal(1378.70692000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x133)))+(((IkReal(-1.00000000000000))*(npy)*(x132))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((npx)*(x133)))+(((npx)*(x132)))+(((IkReal(-1.00000000000000))*(npy)*(x134)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x135))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst48)*(((((npx)*(x135)))+(((IkReal(-1.00000000000000))*(npx)*(x134)))+(((IkReal(1378.70692000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x133)))+(((IkReal(-1.00000000000000))*(npy)*(x132)))))), ((gconst48)*(((((npx)*(x133)))+(((npx)*(x132)))+(((IkReal(-1.00000000000000))*(npy)*(x134)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x135)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x136=IKsin(j6);
IkReal x137=IKcos(j6);
IkReal x138=((IkReal(1.00000000000000))*(npx));
IkReal x139=((IkReal(0.546100000000000))*(cj3));
IkReal x140=((npy)*(x136));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(-0.0635000000000000))*(npx)*(x137)))+(pp)+(((IkReal(0.0635000000000000))*(x140))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x137)))+(((IkReal(-1.00000000000000))*(x136)*(x138)))+(((sj4)*(x139)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(0.0317500000000000))+(((IkReal(-1.00000000000000))*(x137)*(x138)))+(x140)+(((IkReal(-0.0698500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x301=((IkReal(0.0698500000000000))*(npy));
IkReal x302=((cj4)*(npx));
IkReal x303=((IkReal(0.546100000000000))*(cj3));
IkReal x304=((sj4)*(x303));
if( IKabs(((gconst49)*(((((IkReal(-0.0317500000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(x302)))+(((sj4)*(x301)))+(((npx)*(x304)))+(((cj4)*(npy)*(x303))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(0.0317500000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-0.0698500000000000))*(npx)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x301)))+(((npy)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst49)*(((((IkReal(-0.0317500000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(x302)))+(((sj4)*(x301)))+(((npx)*(x304)))+(((cj4)*(npy)*(x303)))))), ((gconst49)*(((((IkReal(0.0317500000000000))*(npx)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-0.0698500000000000))*(npx)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x301)))+(((npy)*(x304)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x305=IKsin(j6);
IkReal x306=IKcos(j6);
IkReal x307=((IkReal(1.00000000000000))*(npx));
IkReal x308=((IkReal(0.546100000000000))*(cj3));
IkReal x309=((npy)*(x305));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)*(x306)))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(0.0635000000000000))*(x309)))+(pp));
evalcond[1]=((((sj4)*(x308)))+(((IkReal(-1.00000000000000))*(x305)*(x307)))+(((IkReal(-1.00000000000000))*(npy)*(x306)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(0.0317500000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x308)))+(x309)+(((IkReal(-1.00000000000000))*(x306)*(x307)))+(((IkReal(-0.0698500000000000))*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x310=((IkReal(-0.622300000000000))+(((IkReal(0.546100000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x310;
evalcond[2]=x310;
evalcond[3]=((IkReal(-0.691369585000000))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(-0.00443547500000000))*(sj4)))+(((IkReal(-0.0346773500000000))*(cj3)*(cj4)))+(pp));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign((((npx)*(npx))+((npy)*(npy))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((((IkReal(127.000000000000))*((npy)*(npy))))+(((IkReal(127.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x311=((IkReal(1359.35212000000))*(sj3));
IkReal x312=((IkReal(2000.00000000000))*(pp));
IkReal x313=((IkReal(8.87095000000000))*(cj4));
IkReal x314=((IkReal(69.3547000000000))*(cj3)*(sj4));
if( IKabs(((gconst50)*(((((IkReal(1378.70692000000))*(npy)))+(((npx)*(x314)))+(((IkReal(-1.00000000000000))*(npy)*(x311)))+(((IkReal(-1.00000000000000))*(npy)*(x312)))+(((IkReal(-1.00000000000000))*(npx)*(x313))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((npy)*(x314)))+(((IkReal(-1378.70692000000))*(npx)))+(((npx)*(x311)))+(((npx)*(x312)))+(((IkReal(-1.00000000000000))*(npy)*(x313))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst50)*(((((IkReal(1378.70692000000))*(npy)))+(((npx)*(x314)))+(((IkReal(-1.00000000000000))*(npy)*(x311)))+(((IkReal(-1.00000000000000))*(npy)*(x312)))+(((IkReal(-1.00000000000000))*(npx)*(x313)))))), ((gconst50)*(((((npy)*(x314)))+(((IkReal(-1378.70692000000))*(npx)))+(((npx)*(x311)))+(((npx)*(x312)))+(((IkReal(-1.00000000000000))*(npy)*(x313)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x315=IKsin(j6);
IkReal x316=IKcos(j6);
IkReal x317=((IkReal(0.546100000000000))*(cj3));
IkReal x318=((IkReal(1.00000000000000))*(x315));
IkReal x319=((npx)*(x316));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(0.679676060000000))*(sj3)))+(pp)+(((IkReal(0.0635000000000000))*(npy)*(x315)))+(((IkReal(-0.0635000000000000))*(x319))));
evalcond[1]=((((sj4)*(x317)))+(((IkReal(-1.00000000000000))*(npy)*(x316)))+(((IkReal(-1.00000000000000))*(npx)*(x318)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(-0.0317500000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x317)))+(x319)+(((IkReal(-0.0698500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(npy)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x320=((IkReal(0.546100000000000))*(cj3));
IkReal x321=((npx)*(sj4));
IkReal x322=((cj4)*(npy));
IkReal x323=((npy)*(sj4));
IkReal x324=((cj4)*(npx));
if( IKabs(((gconst51)*(((((x320)*(x321)))+(((IkReal(-1.00000000000000))*(x320)*(x322)))+(((IkReal(-0.0317500000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(x323)))+(((IkReal(-0.0698500000000000))*(x324))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(0.0698500000000000))*(x321)))+(((x320)*(x323)))+(((x320)*(x324)))+(((IkReal(0.0317500000000000))*(npx)))+(((IkReal(-0.0698500000000000))*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst51)*(((((x320)*(x321)))+(((IkReal(-1.00000000000000))*(x320)*(x322)))+(((IkReal(-0.0317500000000000))*(npy)))+(((IkReal(-0.0698500000000000))*(x323)))+(((IkReal(-0.0698500000000000))*(x324)))))), ((gconst51)*(((((IkReal(0.0698500000000000))*(x321)))+(((x320)*(x323)))+(((x320)*(x324)))+(((IkReal(0.0317500000000000))*(npx)))+(((IkReal(-0.0698500000000000))*(x322)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x325=IKsin(j6);
IkReal x326=IKcos(j6);
IkReal x327=((IkReal(0.546100000000000))*(cj3));
IkReal x328=((IkReal(1.00000000000000))*(x325));
IkReal x329=((npx)*(x326));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(0.0635000000000000))*(npy)*(x325)))+(((IkReal(0.679676060000000))*(sj3)))+(pp)+(((IkReal(-0.0635000000000000))*(x329))));
evalcond[1]=((((sj4)*(x327)))+(((IkReal(-1.00000000000000))*(npx)*(x328)))+(((IkReal(-1.00000000000000))*(npy)*(x326)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(-0.0317500000000000))+(((IkReal(-1.00000000000000))*(npy)*(x328)))+(x329)+(((IkReal(-0.0698500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x327))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x330=((npz)*(sj5));
IkReal x331=((IkReal(0.546100000000000))*(npx));
IkReal x332=((IkReal(0.0317500000000000))*(cj5));
IkReal x333=((IkReal(0.546100000000000))*(npy));
IkReal x334=((IkReal(0.0698500000000000))*(cj4)*(cj5));
IkReal x335=((cj3)*(cj5)*(sj4));
if( IKabs(((gconst47)*(((((sj3)*(x333)))+(((x331)*(x335)))+(((npy)*(x330)))+(((IkReal(-0.622300000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x332)))+(((IkReal(-1.00000000000000))*(npx)*(x334))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((((IkReal(-1.00000000000000))*(sj3)*(x331)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((x333)*(x335)))+(((IkReal(-1.00000000000000))*(npy)*(x334)))+(((IkReal(0.622300000000000))*(npx)))+(((npx)*(x332))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst47)*(((((sj3)*(x333)))+(((x331)*(x335)))+(((npy)*(x330)))+(((IkReal(-0.622300000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x332)))+(((IkReal(-1.00000000000000))*(npx)*(x334)))))), ((gconst47)*(((((IkReal(-1.00000000000000))*(sj3)*(x331)))+(((IkReal(-1.00000000000000))*(npx)*(x330)))+(((x333)*(x335)))+(((IkReal(-1.00000000000000))*(npy)*(x334)))+(((IkReal(0.622300000000000))*(npx)))+(((npx)*(x332)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x336=IKsin(j6);
IkReal x337=IKcos(j6);
IkReal x338=((IkReal(0.546100000000000))*(sj3));
IkReal x339=((IkReal(0.0698500000000000))*(sj4));
IkReal x340=((IkReal(0.546100000000000))*(cj3));
IkReal x341=((npy)*(x336));
IkReal x342=((npx)*(x337));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(-0.0635000000000000))*(x342)))+(pp)+(((IkReal(0.0635000000000000))*(x341))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npy)*(x337)))+(((IkReal(-1.00000000000000))*(npx)*(x336)))+(((sj4)*(x340)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(-0.622300000000000))+(((npz)*(sj5)))+(x338)+(((IkReal(-0.0317500000000000))*(cj5)))+(((cj5)*(x342)))+(((IkReal(-1.00000000000000))*(cj5)*(x341))));
evalcond[3]=((((IkReal(0.0317500000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(x340)))+(((sj5)*(x341)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x342)))+(((IkReal(-1.00000000000000))*(x339))));
evalcond[4]=((IkReal(0.0317500000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x339)))+(((IkReal(-1.00000000000000))*(cj5)*(x338)))+(x341)+(((IkReal(0.622300000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x340)))+(((IkReal(-1.00000000000000))*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x343=((IkReal(1359.35212000000))*(sj3));
IkReal x344=((IkReal(2000.00000000000))*(pp));
IkReal x345=((IkReal(8.87095000000000))*(cj4));
IkReal x346=((IkReal(69.3547000000000))*(cj3)*(sj4));
if( IKabs(((gconst46)*(((((npx)*(x346)))+(((IkReal(-1.00000000000000))*(npy)*(x343)))+(((IkReal(-1.00000000000000))*(npy)*(x344)))+(((IkReal(1378.70692000000))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x345))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((npx)*(x343)))+(((npx)*(x344)))+(((IkReal(-1.00000000000000))*(npy)*(x345)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x346))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst46)*(((((npx)*(x346)))+(((IkReal(-1.00000000000000))*(npy)*(x343)))+(((IkReal(-1.00000000000000))*(npy)*(x344)))+(((IkReal(1378.70692000000))*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(x345)))))), ((gconst46)*(((((npx)*(x343)))+(((npx)*(x344)))+(((IkReal(-1.00000000000000))*(npy)*(x345)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x346)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x347=IKsin(j6);
IkReal x348=IKcos(j6);
IkReal x349=((IkReal(0.546100000000000))*(sj3));
IkReal x350=((IkReal(0.0698500000000000))*(sj4));
IkReal x351=((IkReal(0.546100000000000))*(cj3));
IkReal x352=((npy)*(x347));
IkReal x353=((npx)*(x348));
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(0.679676060000000))*(sj3)))+(pp)+(((IkReal(-0.0635000000000000))*(x353)))+(((IkReal(0.0635000000000000))*(x352))));
evalcond[1]=((((sj4)*(x351)))+(((IkReal(-1.00000000000000))*(npy)*(x348)))+(((IkReal(-1.00000000000000))*(npx)*(x347)))+(((IkReal(-0.0698500000000000))*(cj4))));
evalcond[2]=((IkReal(-0.622300000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x352)))+(((npz)*(sj5)))+(x349)+(((IkReal(-0.0317500000000000))*(cj5)))+(((cj5)*(x353))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x350)))+(((IkReal(0.0317500000000000))*(sj5)))+(((sj5)*(x352)))+(((IkReal(-1.00000000000000))*(sj5)*(x353)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(cj4)*(x351))));
evalcond[4]=((IkReal(0.0317500000000000))+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x351)))+(((IkReal(-1.00000000000000))*(cj5)*(x349)))+(((IkReal(-1.00000000000000))*(x353)))+(x352)+(((IkReal(0.622300000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(sj5)*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x354=((IkReal(1359.35212000000))*(sj3));
IkReal x355=((IkReal(2000.00000000000))*(pp));
IkReal x356=((IkReal(8.87095000000000))*(cj4));
IkReal x357=((IkReal(69.3547000000000))*(cj3)*(sj4));
if( IKabs(((gconst45)*(((((IkReal(-1.00000000000000))*(npy)*(x355)))+(((IkReal(-1.00000000000000))*(npy)*(x354)))+(((IkReal(-1.00000000000000))*(npx)*(x356)))+(((IkReal(1378.70692000000))*(npy)))+(((npx)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(-1.00000000000000))*(npy)*(x356)))+(((npx)*(x355)))+(((npx)*(x354)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst45)*(((((IkReal(-1.00000000000000))*(npy)*(x355)))+(((IkReal(-1.00000000000000))*(npy)*(x354)))+(((IkReal(-1.00000000000000))*(npx)*(x356)))+(((IkReal(1378.70692000000))*(npy)))+(((npx)*(x357)))))), ((gconst45)*(((((IkReal(-1.00000000000000))*(npy)*(x356)))+(((npx)*(x355)))+(((npx)*(x354)))+(((IkReal(-1378.70692000000))*(npx)))+(((npy)*(x357)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x358=IKsin(j6);
IkReal x359=IKcos(j6);
evalcond[0]=((IkReal(-0.689353460000000))+(((IkReal(-0.0635000000000000))*(npx)*(x359)))+(((IkReal(0.0635000000000000))*(npy)*(x358)))+(((IkReal(0.679676060000000))*(sj3)))+(pp));
evalcond[1]=((((IkReal(0.546100000000000))*(cj3)*(sj4)))+(((IkReal(-1.00000000000000))*(npx)*(x358)))+(((IkReal(-1.00000000000000))*(npy)*(x359)))+(((IkReal(-0.0698500000000000))*(cj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst52;
IkReal x360=((npy)*(sj6));
IkReal x361=((IkReal(0.546100000000000))*(sj3));
IkReal x362=((cj6)*(npx));
gconst52=IKsign(((IkReal(-0.0197580250000000))+(((IkReal(-1.00000000000000))*(x361)*(x362)))+(((IkReal(0.0173386750000000))*(sj3)))+(((IkReal(-0.0698500000000000))*(npz)*(sj4)))+(((IkReal(-0.546100000000000))*(cj3)*(cj4)*(npz)))+(((IkReal(-0.622300000000000))*(x360)))+(((x360)*(x361)))+(((IkReal(0.622300000000000))*(x362)))));
IkReal x363=((npy)*(sj6));
IkReal x364=((IkReal(31.4960629921260))*(sj3));
IkReal x365=((cj6)*(npx));
dummyeval[0]=((IkReal(-1.13953488372093))+(sj3)+(((IkReal(35.8908624793994))*(x365)))+(((IkReal(-31.4960629921260))*(cj3)*(cj4)*(npz)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((IkReal(-35.8908624793994))*(x363)))+(((x363)*(x364)))+(((IkReal(-4.02856619666728))*(npz)*(sj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x366=((cj6)*(npx));
IkReal x367=((npy)*(sj6));
gconst53=IKsign(((IkReal(-0.00100806250000000))+(((IkReal(-1.00000000000000))*((x367)*(x367))))+(((IkReal(2.00000000000000))*(x366)*(x367)))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((x366)*(x366))))+(((IkReal(-0.0635000000000000))*(x367)))+(((IkReal(0.0635000000000000))*(x366)))));
IkReal x368=((cj6)*(npx));
IkReal x369=((npy)*(sj6));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(1984.00396800794))*(x368)*(x369)))+(((IkReal(-62.9921259842520))*(x369)))+(((IkReal(62.9921259842520))*(x368)))+(((IkReal(-992.001984003968))*((x369)*(x369))))+(((IkReal(-992.001984003968))*((x368)*(x368))))+(((IkReal(-992.001984003968))*((npz)*(npz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x370=((npy)*(sj6));
IkReal x371=((IkReal(0.546100000000000))*(sj3));
IkReal x372=((cj6)*(npx));
IkReal x373=((IkReal(0.0698500000000000))*(sj4));
IkReal x374=((IkReal(0.546100000000000))*(cj3)*(cj4));
if( IKabs(((gconst53)*(((((IkReal(-0.00221773750000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x370)*(x373)))+(((IkReal(-1.00000000000000))*(x370)*(x374)))+(((IkReal(-0.0173386750000000))*(cj3)*(cj4)))+(((npz)*(x371)))+(((x372)*(x373)))+(((x372)*(x374)))+(((IkReal(-0.622300000000000))*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((IkReal(0.0197580250000000))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((IkReal(-0.622300000000000))*(x372)))+(((IkReal(-0.0173386750000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npz)*(x373)))+(((IkReal(-1.00000000000000))*(npz)*(x374)))+(((IkReal(0.622300000000000))*(x370)))+(((x371)*(x372))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst53)*(((((IkReal(-0.00221773750000000))*(sj4)))+(((IkReal(-1.00000000000000))*(x370)*(x373)))+(((IkReal(-1.00000000000000))*(x370)*(x374)))+(((IkReal(-0.0173386750000000))*(cj3)*(cj4)))+(((npz)*(x371)))+(((x372)*(x373)))+(((x372)*(x374)))+(((IkReal(-0.622300000000000))*(npz)))))), ((gconst53)*(((IkReal(0.0197580250000000))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((IkReal(-0.622300000000000))*(x372)))+(((IkReal(-0.0173386750000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npz)*(x373)))+(((IkReal(-1.00000000000000))*(npz)*(x374)))+(((IkReal(0.622300000000000))*(x370)))+(((x371)*(x372)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x375=IKcos(j5);
IkReal x376=IKsin(j5);
IkReal x377=((cj6)*(npx));
IkReal x378=((npy)*(sj6));
IkReal x379=((cj3)*(cj4));
IkReal x380=((IkReal(0.0698500000000000))*(sj4));
IkReal x381=((IkReal(0.546100000000000))*(sj3));
IkReal x382=((sj4)*(x376));
IkReal x383=((IkReal(0.546100000000000))*(x375));
evalcond[0]=((IkReal(-0.622300000000000))+(((x375)*(x377)))+(((npz)*(x376)))+(x381)+(((IkReal(-0.0317500000000000))*(x375)))+(((IkReal(-1.00000000000000))*(x375)*(x378))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x376)*(x381)))+(((IkReal(-1.00000000000000))*(npz)))+(((x379)*(x383)))+(((IkReal(0.622300000000000))*(x376)))+(((x375)*(x380))));
evalcond[2]=((IkReal(-0.691369585000000))+(((IkReal(-0.0395160500000000))*(x375)))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(0.0346773500000000))*(sj3)*(x375)))+(pp)+(((IkReal(0.0346773500000000))*(x376)*(x379)))+(((IkReal(0.00443547500000000))*(x382))));
evalcond[3]=((((IkReal(-0.546100000000000))*(x379)))+(((IkReal(0.0317500000000000))*(x376)))+(((npz)*(x375)))+(((x376)*(x378)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(x376)*(x377))));
evalcond[4]=((IkReal(0.0317500000000000))+(((IkReal(-1.00000000000000))*(x377)))+(((IkReal(-1.00000000000000))*(x376)*(x380)))+(((IkReal(-1.00000000000000))*(x375)*(x381)))+(x378)+(((IkReal(-0.546100000000000))*(x376)*(x379)))+(((IkReal(0.622300000000000))*(x375))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x384=((cj3)*(cj4));
if( IKabs(((gconst52)*(((((IkReal(0.0381450850000000))*(sj3)*(sj4)))+(((IkReal(-0.0317500000000000))*(npz)))+(((IkReal(-0.339838030000000))*(x384)))+(((IkReal(-0.0434676550000000))*(sj4)))+(((IkReal(0.298225210000000))*(sj3)*(x384)))+(((cj6)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((IkReal(0.387257290000000))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(0.298225210000000))*((sj3)*(sj3))))+(((IkReal(-0.679676060000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst52)*(((((IkReal(0.0381450850000000))*(sj3)*(sj4)))+(((IkReal(-0.0317500000000000))*(npz)))+(((IkReal(-0.339838030000000))*(x384)))+(((IkReal(-0.0434676550000000))*(sj4)))+(((IkReal(0.298225210000000))*(sj3)*(x384)))+(((cj6)*(npx)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(sj6)))))), ((gconst52)*(((IkReal(0.387257290000000))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(0.298225210000000))*((sj3)*(sj3))))+(((IkReal(-0.679676060000000))*(sj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x385=IKcos(j5);
IkReal x386=IKsin(j5);
IkReal x387=((cj6)*(npx));
IkReal x388=((npy)*(sj6));
IkReal x389=((cj3)*(cj4));
IkReal x390=((IkReal(0.0698500000000000))*(sj4));
IkReal x391=((IkReal(0.546100000000000))*(sj3));
IkReal x392=((sj4)*(x386));
IkReal x393=((IkReal(0.546100000000000))*(x385));
evalcond[0]=((IkReal(-0.622300000000000))+(((IkReal(-1.00000000000000))*(x385)*(x388)))+(((IkReal(-0.0317500000000000))*(x385)))+(x391)+(((npz)*(x386)))+(((x385)*(x387))));
evalcond[1]=((((x385)*(x390)))+(((IkReal(-1.00000000000000))*(x386)*(x391)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.622300000000000))*(x386)))+(((x389)*(x393))));
evalcond[2]=((IkReal(-0.691369585000000))+(((IkReal(0.679676060000000))*(sj3)))+(((IkReal(0.0346773500000000))*(x386)*(x389)))+(((IkReal(0.00443547500000000))*(x392)))+(((IkReal(-0.0395160500000000))*(x385)))+(pp)+(((IkReal(0.0346773500000000))*(sj3)*(x385))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(((IkReal(-0.546100000000000))*(x389)))+(((x386)*(x388)))+(((npz)*(x385)))+(((IkReal(0.0317500000000000))*(x386))));
evalcond[4]=((IkReal(0.0317500000000000))+(((IkReal(-0.546100000000000))*(x386)*(x389)))+(((IkReal(-1.00000000000000))*(x386)*(x390)))+(((IkReal(-1.00000000000000))*(x385)*(x391)))+(x388)+(((IkReal(0.622300000000000))*(x385)))+(((IkReal(-1.00000000000000))*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x141=((r02)*(sj5));
IkReal x142=((r12)*(sj5));
IkReal x143=((r22)*(sj5));
IkReal x144=((IkReal(1.00000000000000))*(cj3));
IkReal x145=((IkReal(1.00000000000000))*(sj3));
IkReal x146=((IkReal(1.00000000000000))*(cj6));
IkReal x147=((IkReal(1.00000000000000))*(sj4));
IkReal x148=((IkReal(1.00000000000000))*(cj5));
IkReal x149=((IkReal(1.00000000000000))*(sj5));
IkReal x150=((IkReal(-1.00000000000000))*(sj5));
IkReal x151=((IkReal(-1.00000000000000))*(sj4));
IkReal x152=((IkReal(-1.00000000000000))*(cj5));
IkReal x153=((((r01)*(sj6)))+(((IkReal(-1.00000000000000))*(r00)*(x146))));
IkReal x154=((((r00)*(sj6)))+(((cj6)*(r01))));
IkReal x155=((((r11)*(sj6)))+(((IkReal(-1.00000000000000))*(r10)*(x146))));
IkReal x156=((((r10)*(sj6)))+(((cj6)*(r11))));
IkReal x157=((((r21)*(sj6)))+(((IkReal(-1.00000000000000))*(r20)*(x146))));
IkReal x158=((((cj6)*(r21)))+(((r20)*(sj6))));
IkReal x159=((((IkReal(-1.00000000000000))*(r02)*(x148)))+(((IkReal(-1.00000000000000))*(x149)*(x153))));
IkReal x160=((((IkReal(-1.00000000000000))*(x149)*(x155)))+(((IkReal(-1.00000000000000))*(r12)*(x148))));
IkReal x161=((((IkReal(-1.00000000000000))*(x149)*(x157)))+(((IkReal(-1.00000000000000))*(r22)*(x148))));
new_r00=((((IkReal(-1.00000000000000))*(x145)*(((((cj4)*(x159)))+(((IkReal(-1.00000000000000))*(x147)*(x154)))))))+(((cj3)*(((((x152)*(x153)))+(x141))))));
new_r01=((((cj4)*(x154)))+(((sj4)*(x159))));
new_r02=((((IkReal(-1.00000000000000))*(x145)*(((x141)+(((IkReal(-1.00000000000000))*(x148)*(x153)))))))+(((IkReal(-1.00000000000000))*(x144)*(((((x151)*(x154)))+(((cj4)*(((((x150)*(x153)))+(((r02)*(x152))))))))))));
new_r10=((((IkReal(-1.00000000000000))*(x145)*(((((cj4)*(x160)))+(((IkReal(-1.00000000000000))*(x147)*(x156)))))))+(((cj3)*(((((x152)*(x155)))+(x142))))));
new_r11=((((cj4)*(x156)))+(((sj4)*(x160))));
new_r12=((((IkReal(-1.00000000000000))*(x144)*(((((cj4)*(((((x150)*(x155)))+(((r12)*(x152)))))))+(((x151)*(x156)))))))+(((IkReal(-1.00000000000000))*(x145)*(((x142)+(((IkReal(-1.00000000000000))*(x148)*(x155))))))));
new_r20=((((IkReal(-1.00000000000000))*(x145)*(((((cj4)*(((((x150)*(x157)))+(((r22)*(x152)))))))+(((x151)*(x158)))))))+(((cj3)*(((x143)+(((IkReal(-1.00000000000000))*(x148)*(x157))))))));
new_r21=((((cj4)*(x158)))+(((sj4)*(x161))));
new_r22=((((IkReal(-1.00000000000000))*(x144)*(((((cj4)*(x161)))+(((IkReal(-1.00000000000000))*(x147)*(x158)))))))+(((IkReal(-1.00000000000000))*(x145)*(((((x152)*(x157)))+(x143))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( ::isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j2))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst63)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst63)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst63)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst63)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x162=IKcos(j0);
IkReal x163=IKsin(j0);
IkReal x164=((IkReal(1.00000000000000))*(x163));
evalcond[0]=((((new_r12)*(x162)))+(((IkReal(-1.00000000000000))*(new_r02)*(x164))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x163)))+(((new_r02)*(x162))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x164)))+(((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x162))));
evalcond[3]=((((new_r11)*(x162)))+(((IkReal(-1.00000000000000))*(new_r01)*(x164)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x162)))+(((new_r11)*(x163))));
evalcond[5]=((((new_r00)*(x162)))+(((new_r10)*(x163))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst62)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst62)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst62)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst62)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x165=IKcos(j0);
IkReal x166=IKsin(j0);
IkReal x167=((IkReal(1.00000000000000))*(x166));
evalcond[0]=((((new_r12)*(x165)))+(((IkReal(-1.00000000000000))*(new_r02)*(x167))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x166)))+(((new_r02)*(x165))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x167)))+(((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x165))));
evalcond[3]=((((new_r11)*(x165)))+(((IkReal(-1.00000000000000))*(new_r01)*(x167)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x165)))+(((new_r11)*(x166))));
evalcond[5]=((((new_r00)*(x165)))+(((new_r10)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j2)))));
evalcond[1]=((IKsin(j2))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst67)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst67)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst67)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst67)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x168=IKcos(j0);
IkReal x169=IKsin(j0);
IkReal x170=((IkReal(1.00000000000000))*(x169));
evalcond[0]=((((new_r12)*(x168)))+(((IkReal(-1.00000000000000))*(new_r02)*(x170))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x169)))+(((new_r02)*(x168))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x168)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170))));
evalcond[3]=((((new_r11)*(x168)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x168)))+(((new_r11)*(x169))));
evalcond[5]=((((new_r00)*(x168)))+(((new_r10)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst66)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst66)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x171=IKcos(j0);
IkReal x172=IKsin(j0);
IkReal x173=((IkReal(1.00000000000000))*(x172));
evalcond[0]=((((new_r12)*(x171)))+(((IkReal(-1.00000000000000))*(new_r02)*(x173))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x171)))+(((new_r12)*(x172))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x173))));
evalcond[3]=((((new_r11)*(x171)))+(((IkReal(-1.00000000000000))*(new_r01)*(x173)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x171)))+(((new_r11)*(x172))));
evalcond[5]=((((new_r00)*(x171)))+(((new_r10)*(x172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x174=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x174));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x174))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x175=IKsin(j2);
IkReal x176=((IkReal(1.00000000000000))*(sj0));
IkReal x177=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x175)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x176))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x177)))+(((IkReal(-1.00000000000000))*(new_r01)*(x176)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x175)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x177)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x178=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x178;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x178;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x179=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x179));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x179))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x180=IKcos(j2);
IkReal x181=((IkReal(1.00000000000000))*(sj0));
IkReal x182=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x182)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x181))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x181)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x182)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x180)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x183=((gconst55)*(new_r22)*(sj1));
if( IKabs(((new_r12)*(x183))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x183))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x183)), ((new_r02)*(x183)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x184=IKcos(j0);
IkReal x185=IKsin(j0);
IkReal x186=((IkReal(1.00000000000000))*(cj1));
IkReal x187=((IkReal(1.00000000000000))*(sj1));
IkReal x188=((new_r12)*(x185));
IkReal x189=((new_r02)*(x184));
evalcond[0]=((((new_r12)*(x184)))+(((IkReal(-1.00000000000000))*(new_r02)*(x185))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(x188)+(x189));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x187)))+(((cj1)*(x188)))+(((cj1)*(x189))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x184)*(x187)))+(((IkReal(-1.00000000000000))*(new_r20)*(x186)))+(((IkReal(-1.00000000000000))*(new_r10)*(x185)*(x187))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x184)*(x187)))+(((IkReal(-1.00000000000000))*(new_r21)*(x186)))+(((IkReal(-1.00000000000000))*(new_r11)*(x185)*(x187))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x186)))+(((IkReal(-1.00000000000000))*(x187)*(x188)))+(((IkReal(-1.00000000000000))*(x187)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x190=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x191=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x190;
evalcond[5]=x190;
evalcond[6]=x191;
evalcond[7]=x191;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x192=IKsin(j2);
IkReal x193=((IkReal(1.00000000000000))*(sj0));
IkReal x194=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x192)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x194)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x195=((IkReal(1.00000000000000))+(new_r22));
IkReal x196=((new_r12)*(sj0));
IkReal x197=((cj0)*(new_r02));
IkReal x198=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x195;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x198;
evalcond[5]=x198;
evalcond[6]=((x197)+(x196));
evalcond[7]=((((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(x197))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x195;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x199=IKcos(j2);
IkReal x200=((IkReal(1.00000000000000))*(sj0));
IkReal x201=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x200)))+(((IkReal(-1.00000000000000))*(x201)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x199)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x200))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x201)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x199)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x202=IKsin(j2);
IkReal x203=IKcos(j2);
IkReal x204=((IkReal(1.00000000000000))*(sj0));
IkReal x205=((IkReal(1.00000000000000))*(sj1));
IkReal x206=((cj0)*(new_r01));
IkReal x207=((cj0)*(new_r00));
IkReal x208=((new_r11)*(sj0));
IkReal x209=((new_r10)*(sj0));
IkReal x210=((IkReal(1.00000000000000))*(x203));
evalcond[0]=((((sj1)*(x203)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x202)*(x205)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x204)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(x202))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x210)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x204))));
evalcond[4]=((((cj1)*(x202)))+(x206)+(x208));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x210)))+(x207)+(x209));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x205)))+(((cj1)*(x206)))+(((cj1)*(x208)))+(x202));
evalcond[7]=((((cj1)*(x207)))+(((cj1)*(x209)))+(((IkReal(-1.00000000000000))*(new_r20)*(x205)))+(((IkReal(-1.00000000000000))*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x211=IKsin(j2);
IkReal x212=IKcos(j2);
IkReal x213=((IkReal(1.00000000000000))*(sj0));
IkReal x214=((IkReal(1.00000000000000))*(sj1));
IkReal x215=((cj0)*(new_r01));
IkReal x216=((cj0)*(new_r00));
IkReal x217=((new_r11)*(sj0));
IkReal x218=((new_r10)*(sj0));
IkReal x219=((IkReal(1.00000000000000))*(x212));
evalcond[0]=((((sj1)*(x212)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x211)*(x214)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x211)))+(((IkReal(-1.00000000000000))*(new_r00)*(x213)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x213)))+(((IkReal(-1.00000000000000))*(x219)))+(((cj0)*(new_r11))));
evalcond[4]=((x215)+(x217)+(((cj1)*(x211))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x219)))+(x216)+(x218));
evalcond[6]=((x211)+(((IkReal(-1.00000000000000))*(new_r21)*(x214)))+(((cj1)*(x217)))+(((cj1)*(x215))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x214)))+(((cj1)*(x218)))+(((cj1)*(x216)))+(((IkReal(-1.00000000000000))*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst57)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst57)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst57)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst57)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x220=IKsin(j2);
IkReal x221=IKcos(j2);
IkReal x222=((IkReal(1.00000000000000))*(sj0));
IkReal x223=((IkReal(1.00000000000000))*(sj1));
IkReal x224=((cj0)*(new_r01));
IkReal x225=((cj0)*(new_r00));
IkReal x226=((new_r11)*(sj0));
IkReal x227=((new_r10)*(sj0));
IkReal x228=((IkReal(1.00000000000000))*(x221));
evalcond[0]=((((sj1)*(x221)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x220)*(x223)))+(new_r21));
evalcond[2]=((((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x222)))+(((IkReal(-1.00000000000000))*(x220))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x222)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[4]=((((cj1)*(x220)))+(x224)+(x226));
evalcond[5]=((x225)+(x227)+(((IkReal(-1.00000000000000))*(cj1)*(x228))));
evalcond[6]=((((cj1)*(x226)))+(((cj1)*(x224)))+(x220)+(((IkReal(-1.00000000000000))*(new_r21)*(x223))));
evalcond[7]=((((cj1)*(x225)))+(((cj1)*(x227)))+(((IkReal(-1.00000000000000))*(new_r20)*(x223)))+(((IkReal(-1.00000000000000))*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x229=((gconst54)*(sj1));
if( IKabs(((new_r12)*(x229))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x229))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x229)), ((new_r02)*(x229)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x230=IKcos(j0);
IkReal x231=IKsin(j0);
IkReal x232=((IkReal(1.00000000000000))*(cj1));
IkReal x233=((IkReal(1.00000000000000))*(sj1));
IkReal x234=((new_r12)*(x231));
IkReal x235=((new_r02)*(x230));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x231)))+(((new_r12)*(x230))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x233)))+(x234)+(x235));
evalcond[2]=((((cj1)*(x235)))+(((cj1)*(x234)))+(((IkReal(-1.00000000000000))*(new_r22)*(x233))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x232)))+(((IkReal(-1.00000000000000))*(new_r10)*(x231)*(x233)))+(((IkReal(-1.00000000000000))*(new_r00)*(x230)*(x233))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x232)))+(((IkReal(-1.00000000000000))*(new_r01)*(x230)*(x233)))+(((IkReal(-1.00000000000000))*(new_r11)*(x231)*(x233))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x233)*(x235)))+(((IkReal(-1.00000000000000))*(x233)*(x234)))+(((IkReal(-1.00000000000000))*(new_r22)*(x232))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x236=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x237=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x236;
evalcond[5]=x236;
evalcond[6]=x237;
evalcond[7]=x237;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x238=IKsin(j2);
IkReal x239=((IkReal(1.00000000000000))*(sj0));
IkReal x240=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x238)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x238)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(x240))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x241=((IkReal(1.00000000000000))+(new_r22));
IkReal x242=((new_r12)*(sj0));
IkReal x243=((cj0)*(new_r02));
IkReal x244=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x241;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x244;
evalcond[5]=x244;
evalcond[6]=((x243)+(x242));
evalcond[7]=((((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(x243))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x241;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x245=IKcos(j2);
IkReal x246=((IkReal(1.00000000000000))*(sj0));
IkReal x247=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x246)))+(((IkReal(-1.00000000000000))*(x247)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x246)))+(((IkReal(-1.00000000000000))*(x245)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(x247))));
evalcond[3]=((((new_r10)*(sj0)))+(x245)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x248=IKsin(j2);
IkReal x249=IKcos(j2);
IkReal x250=((IkReal(1.00000000000000))*(sj0));
IkReal x251=((IkReal(1.00000000000000))*(sj1));
IkReal x252=((cj0)*(new_r01));
IkReal x253=((cj0)*(new_r00));
IkReal x254=((new_r11)*(sj0));
IkReal x255=((new_r10)*(sj0));
IkReal x256=((IkReal(1.00000000000000))*(x249));
evalcond[0]=((new_r20)+(((sj1)*(x249))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x248)*(x251)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x248)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x250))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x250)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x256))));
evalcond[4]=((((cj1)*(x248)))+(x254)+(x252));
evalcond[5]=((x255)+(x253)+(((IkReal(-1.00000000000000))*(cj1)*(x256))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x251)))+(((cj1)*(x254)))+(((cj1)*(x252)))+(x248));
evalcond[7]=((((cj1)*(x255)))+(((cj1)*(x253)))+(((IkReal(-1.00000000000000))*(new_r20)*(x251)))+(((IkReal(-1.00000000000000))*(x256))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x257=IKsin(j2);
IkReal x258=IKcos(j2);
IkReal x259=((IkReal(1.00000000000000))*(sj0));
IkReal x260=((IkReal(1.00000000000000))*(sj1));
IkReal x261=((cj0)*(new_r01));
IkReal x262=((cj0)*(new_r00));
IkReal x263=((new_r11)*(sj0));
IkReal x264=((new_r10)*(sj0));
IkReal x265=((IkReal(1.00000000000000))*(x258));
evalcond[0]=((((sj1)*(x258)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x257)*(x260))));
evalcond[2]=((((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x259)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x259)))+(((IkReal(-1.00000000000000))*(x265)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x257)))+(x261)+(x263));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x265)))+(x264)+(x262));
evalcond[6]=((((cj1)*(x263)))+(((cj1)*(x261)))+(((IkReal(-1.00000000000000))*(new_r21)*(x260)))+(x257));
evalcond[7]=((((cj1)*(x264)))+(((cj1)*(x262)))+(((IkReal(-1.00000000000000))*(new_r20)*(x260)))+(((IkReal(-1.00000000000000))*(x265))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst57)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst57)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst57)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst57)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x266=IKsin(j2);
IkReal x267=IKcos(j2);
IkReal x268=((IkReal(1.00000000000000))*(sj0));
IkReal x269=((IkReal(1.00000000000000))*(sj1));
IkReal x270=((cj0)*(new_r01));
IkReal x271=((cj0)*(new_r00));
IkReal x272=((new_r11)*(sj0));
IkReal x273=((new_r10)*(sj0));
IkReal x274=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((new_r20)+(((sj1)*(x267))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x266)*(x269))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(new_r00)*(x268)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x268)))+(((IkReal(-1.00000000000000))*(x274)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x266)))+(x272)+(x270));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x274)))+(x273)+(x271));
evalcond[6]=((((cj1)*(x272)))+(((cj1)*(x270)))+(((IkReal(-1.00000000000000))*(new_r21)*(x269)))+(x266));
evalcond[7]=((((cj1)*(x271)))+(((cj1)*(x273)))+(((IkReal(-1.00000000000000))*(new_r20)*(x269)))+(((IkReal(-1.00000000000000))*(x274))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst56)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst56)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst56)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst56)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break;
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x275=((cj1)*(gconst59)*(sj2));
if( IKabs(((new_r12)*(x275))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x275))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x275)), ((new_r02)*(x275)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x276=IKcos(j0);
IkReal x277=IKsin(j0);
IkReal x278=((IkReal(1.00000000000000))*(cj2));
IkReal x279=((IkReal(1.00000000000000))*(sj1));
IkReal x280=((IkReal(1.00000000000000))*(cj1));
IkReal x281=((new_r10)*(x277));
IkReal x282=((new_r01)*(x276));
IkReal x283=((new_r00)*(x276));
IkReal x284=((IkReal(1.00000000000000))*(x277));
IkReal x285=((new_r11)*(x277));
IkReal x286=((new_r12)*(x277));
IkReal x287=((new_r02)*(x276));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x284)))+(((new_r12)*(x276))));
evalcond[1]=((x287)+(x286)+(((IkReal(-1.00000000000000))*(x279))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x284)))+(((new_r10)*(x276))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x284)))+(((IkReal(-1.00000000000000))*(x278)))+(((new_r11)*(x276))));
evalcond[4]=((((cj1)*(sj2)))+(x285)+(x282));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x278)))+(x283)+(x281));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x279)))+(((cj1)*(x287)))+(((cj1)*(x286))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x280)))+(((IkReal(-1.00000000000000))*(x279)*(x281)))+(((IkReal(-1.00000000000000))*(x279)*(x283))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x280)))+(((IkReal(-1.00000000000000))*(x279)*(x282)))+(((IkReal(-1.00000000000000))*(x279)*(x285))));
evalcond[9]=((sj2)+(((IkReal(-1.00000000000000))*(new_r21)*(x279)))+(((cj1)*(x282)))+(((cj1)*(x285))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x280)))+(((IkReal(-1.00000000000000))*(x279)*(x287)))+(((IkReal(-1.00000000000000))*(x279)*(x286))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x279)))+(((IkReal(-1.00000000000000))*(x278)))+(((cj1)*(x281)))+(((cj1)*(x283))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x288=((gconst58)*(sj1));
if( IKabs(((new_r12)*(x288))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x288))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x288)), ((new_r02)*(x288)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x289=IKcos(j0);
IkReal x290=IKsin(j0);
IkReal x291=((IkReal(1.00000000000000))*(cj2));
IkReal x292=((IkReal(1.00000000000000))*(sj1));
IkReal x293=((IkReal(1.00000000000000))*(cj1));
IkReal x294=((new_r10)*(x290));
IkReal x295=((new_r01)*(x289));
IkReal x296=((new_r00)*(x289));
IkReal x297=((IkReal(1.00000000000000))*(x290));
IkReal x298=((new_r11)*(x290));
IkReal x299=((new_r12)*(x290));
IkReal x300=((new_r02)*(x289));
evalcond[0]=((((new_r12)*(x289)))+(((IkReal(-1.00000000000000))*(new_r02)*(x297))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x292)))+(x300)+(x299));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x297)))+(((new_r10)*(x289))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x297)))+(((IkReal(-1.00000000000000))*(x291)))+(((new_r11)*(x289))));
evalcond[4]=((((cj1)*(sj2)))+(x298)+(x295));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x291)))+(x294)+(x296));
evalcond[6]=((((cj1)*(x300)))+(((cj1)*(x299)))+(((IkReal(-1.00000000000000))*(new_r22)*(x292))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x293)))+(((IkReal(-1.00000000000000))*(x292)*(x294)))+(((IkReal(-1.00000000000000))*(x292)*(x296))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x293)))+(((IkReal(-1.00000000000000))*(x292)*(x298)))+(((IkReal(-1.00000000000000))*(x292)*(x295))));
evalcond[9]=((sj2)+(((IkReal(-1.00000000000000))*(new_r21)*(x292)))+(((cj1)*(x298)))+(((cj1)*(x295))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x292)*(x300)))+(((IkReal(-1.00000000000000))*(new_r22)*(x293)))+(((IkReal(-1.00000000000000))*(x292)*(x299))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x292)))+(((cj1)*(x294)))+(((cj1)*(x296)))+(((IkReal(-1.00000000000000))*(x291))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f5eed27348dddc000a3ab00b30ed51c8"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
